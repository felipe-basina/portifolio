(def account (atom {}))
(def account (atom nil))
(swap! account {:active true :amount 100})
@account
(swap! account assoc {:active true :amount 100})
(def tm {:active true :amount 100})
tm
(swap! account assoc tm)
(swap! account tm)
(swap! account (merge account {:active false :amount 200}))
(swap! account (merge @account {:active false :amount 200}))
(swap! account assoc :active false :amount 200)
(def arr (atom []))
(swap! arr conj {:a 1})
(swap! arr conj {:a 2})
(swap! arr cons {:a 3})
(def arr (atom '()))
(swap! arr cons {:a 1})
(def arr (atom '()))
@arr
(swap! arr conj {:a 1})
(swap! arr conj {:a 2})
(swap! arr conj {:a 3})
(take 2 @arr)
(take 3 @arr)
(take 4 @arr)
(def arr (atom nil))
(swap! arr conj {:a 1})
(swap! arr conj {:a 2})
(:b arr)
(:a arr)
(first [1 2 3])
(last [1 2 3])
(take 2 {})
(take 2 {:a 1})
(def temp (take 2 {:a 1}))
(list? temp)
(class temp)
(first temp)
(map (first temp))
(def mylist '({:a 1} {:b 2} {:c 3}))
(take 1 mylist)
(take 2 mylist)
(flatten (take 2 mylist))
(flat-map (take 2 mylist))
(reduce {} (flatten (take 2 mylist)))
(flatten (take 2 mylist))
(first  (take 2 mylist))
(:a (first  (take 2 mylist)))
(def mylist '({:a 1} {:b 2} {:c 3} {:d 4))
(def mylist '({:a 1} {:b 2} {:c 3} {:d 4})
)
(mylist cons {:e 5})
(cons mylist {:e 5})
mylist
(conj mylist {:e 5})
(take 3 (conj mylist {:e 5}))
(def merchant "habibs")
(name merchant)
(keyword merchant)
(:name merchant)
(:name #'merchant)
(:name (meta #'merchant))
(keyword (:name (meta #'merchant)))
merchant
(str '# merchant)
(str "'#" merchant)
(str \'# merchant)
(str \\'# merchant)
(and (= 1 1) (= 3 3))
(def mn "felipe")
mn
(println mn)
clear
(def mv (atom []))
(swap! mv conj 1)
(empty? (swap! mv conj 1))
(empty? [])
(if (= 1 1) "ok")
(if (= 1 2) "ok")
(when (= 1 1) "ok)
(when (= 1 1) "ok")
(when (= 1 2) "ok")
(def mmap {:a "alpha"})
map
mmap
(assoc mmap :a "beta")
(mmap)
mmap
clear
(def db (atom {:account nil :transactions nil}))
db
(swap! db :account {:id 1 :amount 10})
db
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10})
db
(:account db)
(:account @db)
(swap! db conj :transcations {:merchant "Pizza" :amount 23})
(swap! db conj [:transcations] {:merchant "Pizza" :amount 23})
(swap! db :transcations conj {:merchant "Pizza" :amount 23})
(swap! db update [:transactions] {:merchant "Pizza" :amount 23})
(swap! db update :transactions {:merchant "Pizza" :amount 23})
(swap! db assoc :transactions {:merchant "Pizza" :amount 23})
(swap! db update-in [:transactions] {:merchant "Pizza" :amount 23})
(def db (atom {:account nil :transactions nil}))
 (swap! db update-in [:transactions] conj {:merchant "Pizza" :amount 23})
 (swap! db update-in [:transactions] conj {:merchant "Hamburguer" :amount 23})
(:transactions @db)
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10 :violations []})
(:account @db)
(swap! db update-in [:violations] conj "violation a")
(def db (atom {:account nil :transactions nil}))
(:account @db)
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10 :violations []})
(swap! db update-in [:account :violations] conj "violation a")
(swap! db update-in [:account :violations] conj "violation b")
(:account @db)
(swap! db update-in [:account :amount] 7)
(swap! db assoc [:account :amount] 7)
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10 :violations []})
(swap! db update-in [:account :amount] (- 10 3))
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10 :violations []})
(swap! db update-in [:account :amount] - 3)
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10})
(swap! db update-in [:account :violations] [])
(swap! db update-in [:account :violations] vec)
(swap! db update-in [:account :violations] conj "violation a")
(swap! db update-in [:account :violations] conj "violation b")
(def db (atom {:account nil :transactions nil}))
(def violation nil)
violation
(swap! storage update-in [:account :violations] (if (nil? violation) vec (conj violation)))
(def db (atom {:account nil :transactions nil}))
(swap! db update-in [:account :violations] (if (nil? violation) vec (conj violation)))
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10})
(swap! db update-in [:account :violations] (if (nil? violation) vec (conj violation)))
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10})
(def violation "a violation 1")
(swap! db update-in [:account :violations] (if (nil? violation) vec (conj violation)))
(swap! db update-in [:account :violations] (if (nil? violation) vec conj violation))
(swap! db update-in [:account :violations] (if (nil? violation) vec (do conj violation)))
(swap! db update-in [:account :violations] (if (nil? violation) vec violation))
(swap! db assoc :account {:id 1 :amount 10 :violations []})
(swap! db update-in [:account :violations] (if (nil? violation) vec violation))
(swap! db update-in [:account :violations] (if (nil? violation) vec (fn [] conj violation))))
(swap! db update-in [:account :violations] (if (nil? violation) vec (fn [] conj violation)))
(swap! db update-in [:account :violations] (if (nil? violation) vec (fn [] violation)))
(swap! db update-in [:account :violations] (if (nil? violation) vec (do update-in [:account :violations] conj violation)))
violation
(swap! db update-in [:account :violations] (cond
                                            (nil? violation) vec 
                                            :else conj violation))
(swap! db update-in [:account :violations] (cond
                                            (nil? violation) vec 
                                            :else (conj violation)))
(swap! db update-in [:account :violations] (cond
                                            (nil? violation) vec 
                                            :else (conj [] violation)))
(swap! db update-in [:account :violations] (cond
                                            (nil? violation) vec 
                                            :else ([] violation)))
(swap! db update-in [:account :violations] conj (if (nil? violation) vec violation))
(swap! db assoc :account {:id 1 :amount 10})
(def violation nil)
(swap! db update-in [:account :violations] conj (if (nil? violation) vec violation))
(swap! db assoc :account {:id 1 :amount 10})
(def violation nil)
(swap! db update-in [:account :violations] conj (if (nil? violation) [] violation))
(def db (atom {:account nil :transactions nil}))
(swap! db update-in [:account :violations] conj (when (not (nil? violation)) violation))
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10})
(swap! db update-in [:account :violations] conj (when (not (nil? violation)) violation))
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10})
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10})
(swap! db update-in [:account :violations] conj (if (nil? violation) (into vec) violation))
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10})
(swap! db update-in [:account :violations] conj (if (nil? violation) into violation))
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10})
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10})
(get-in @db [:account :id])
(def db (atom {:account nil :transactions nil}))
(swap! db update-in [:transactions] conj {:merchant "Pizza" :amount 23})
(swap! db update-in [:transactions] conj {:merchant "Hamburguer" :amount 23})
(:transactions @db)
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10 :violations []})
(swap! db update-in [:transactions] conj {:merchant "Pizza" :amount 23})
(swap! db update-in [:transactions] conj {:merchant "Hamburguer" :amount 23})
(swap! db update-in [:account :amount] - 3)
(swap! db update-in [:account :violations] conj "violation a")
(swap! db update-in [:account :violations] conj "violation b")
exit
(def db (atom {:account nil :transactions nil}))
(swap! db assoc :account {:id 1 :amount 10 :violations []})
(swap! db update-in [:account :violations] conj "violation a")
clear
(def map {:violations ["teste 1" "teste 2"]})
(def mm {:violations ["teste 1" "teste 2"]})
mm
(vals (:violations mm))
(vals mm)
(require [clojure.string :as str])
(:require [clojure.string :as str])
(:require '[clojure.string :as str])
(str/includes (vals mm) "teste 1))
)
(str/includes (vals mm) "teste 1")
(str/includes? (vals mm) "teste 1")
(require '[clojure.string :as str])
(str/includes? "abcc" "bc")
(str/includes (vals mm) "teste 1")
(str/includes? (vals mm) "teste 1")
(str/includes? (vals mm) "teste 2")
(str/includes? (vals mm) "teste 3")
mm
(flat (:violations mm))
(some[C (:violations mm)
(some (:violations mm) "teste 1")
(some "teste 1" (:violations mm))
(some "teste 1" (list (:violations mm)))
(contains? '(1 2 3 4) 1)
(some 1 '(1 2 3 4))
(some #(= "teste 1" %) (:violations mm))
(some #(= "teste 3" %) (:violations mm))
